I = x: x;

TRUE = first, second: first;
FALSE = first, second: second;

AND = cond1, cond2: cond1 cond2 FALSE;
OR = cond1, cond2: cond1 TRUE cond2;
NOT = cond: (first, second: cond second first);

LIST = head, tail: (x: x head tail);
LISTOP = op: (list: list op);
HEAD = LISTOP TRUE;
TAIL = LISTOP FALSE;
NULL = LISTOP (first, second: FALSE);
NIL = x: TRUE;

N0 = NIL;
N1 = LIST I N0;
N2 = LIST I N1;
N3 = LIST I N2;
N4 = LIST I N3;
SUCC = LIST I;
PRED = TAIL;
ZERO = NULL;

A = self, func: func (self self func);
Y = A A;

PLUSR = self, m, n: (ZERO m) n (SUCC (self (PRED m) n));
PLUS = Y PLUSR;
MULTR = self, m, n: (ZERO m) N0 (PLUS m (self (PRED m) n));
MULT = Y MULTR;
FACTR = self, n: (ZERO n) N1 (MULT n (self (PRED n)));
FACT = Y FACTR;

FACT N4
